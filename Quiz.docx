
# how to::
##########################################
Title
#############################
title2
##################
# *Quiz questions*
>Q
\>>A
##################
######
# 0x10


######

######

######
# 0x10


######



#########################################
System engin. DevOps
#############################
python
##################

######
# 0x0

>Question #0

What does this command line print?

>>> a = "Python is cool"
>>> print(a[7:])

\>>>> is cool


Python i


Python is


cool

> Question #1

What does this command line print?

>>> a = "Python is cool"
>>> print(a[:6])

is cool


Pytho


\>>>> Python


Python is

> Question #2

What does this command line print?

>>> a = "Python is cool"
>>> print(a[0:6])

Python is cool


\>>>> Python


Pytho


Python is

> Question #3

What does this command line print?

>>> a = "Python is cool"
>>> print(a[4])

h


P


n


\>>>> o

>Question #4

What does this command line print?

>>> print(f"{98} Battery street")

8 Battery street


\>>>> 98 Battery street


f"98 Battery street"


9 Battery street

>Question #5

What does this command line print?

>>> print("Holberton school")

‘Holberton school’


Holberton


“Holberton school”


\>>>> Holberton school

> Question #6

What does this command line print?

>>> a = "Python is cool"
>>> print(a[-2])

Nothing


ol


l


\>>>> o

> Question #7

Who created Python?


Julien Barbier


Yukihiro Matsumoto


\>>>>  Guido van Rossum

>Question #8

What does this command line print?

>>> a = "Python is cool"
>>> print(a[7:-5])

\>>>> is


on


nohtyP


si


Python

> Question #9

What does this command line print?

>>> print(f"{98} Battery street, {'San Francisco'}")

San Francisco Battery street, 98


“98 Battery street, San Francisco”


8 Battery street, San


\>>>> 98 Battery street, San Francisco

 
######
# 0x1

> Question #0

What do these lines print?

for i in range(2, 4):
    print(i, end=" ")

3 4


2 4


\>>>> 2 3


2 3 4

> Question #1

What do these lines print?

for i in range(4):
    print(i, end=" ")

0 1 2 3 4


1 2 3 4


1 2 3


\>>>> 0 1 2 3

> Question #2

What do these lines print?

a = 12
if a < 2:
    print("Holberton")
elif a % 2 == 0:
    print("C is fun")
else:
    print("School")

Holberton


\>>>> C is fun


School

> Question #3

What do these lines print?

a = 12
if a > 2:
    if a % 2 == 0:
        print("Holberton")
    else:
        print("C is fun")
else:
    print("School")

\>>>> Holberton


C is fun


School

> Question #4

What do these lines print?

if 12 == 48/4 and False:
    print("Holberton")
else:
    print("School")

\>>>> School


 Holberton

> Question #5

What do these lines print?

if 12 == 48/4:
    print("Holberton")
else:
    print("School")

School


\>>>> Holberton

> Question #6

What do these lines print?

if True:
    print("Holberton")
else:
    print("School")

School


\>>>> Holberton

>Question #7

What do these lines print?

for i in range(2, 10, 2):
    print(i, end=" ")

\>>>> 2 4 6 8


2 3 4 5 6 7 8 9 10


2 3 4 5 6 7 8 9


4 6 8 10 12 14 16 18

> Question #8

What do these lines print?

if 12 == 48/3 or 12 is 12:
    print("Holberton")
else:
    print("School")

School


\>>>> Holberton

######

######
# 0x2
######

> Question #0

What do these lines print?

>>> def my_function(counter=89):
>>>     return counter + 1
>>> 
>>> print(my_function())

891


1


89


\>>>>> .     90

> Question #1

What do these lines print?

>>> def my_function(counter=89):
>>>     print("Counter: {}".format(counter))
>>> 
>>> my_function()

Counter: 12


\>>>>> .     Counter: 89


Counter: 101

> Question #2

What do these lines print?

>>> def my_function(counter):
>>>     print("Counter: {}".format(counter))
>>> 
>>> my_function(12)

Counter: counter


Counter: c


\>>>>> .    Counter: 12

> Question #3

What do these lines print?

>>> def my_function():
>>>     print("In my function")
>>> 
>>> my_function

Nothing


“In my function”


In my function


\>>>>> .    function my_function at …

> Question #4

What do these lines print?

>>> def my_function():
>>>     print("In my function")
>>> 
>>> my_function()

Nothing


“In my function”


\>>>>> .    In my function


function my_function at …

> Question #5

What do these lines print?

>>> def my_function(counter=89):
>>>     print("Counter: {}".format(counter))
>>> 
>>> my_function(12)

\>>>>> .     Counter: 12


Counter: 89


Counter: 101



######
# 0x3
######

> Question #0

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> b = a
>>> b

a


\>>>> [1, 2, 3, 4]


[1]


1

> Question #1

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> a[2] = 10
>>> a

[1, 2, 10, 10]


[1, 2, 3, 4]


[1, 10, 3, 4]


\>>>> [1, 2, 10, 4]

> Question #2

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> a[1:3]

[1, 2, 3]


[1, 2]


\>>>> [2, 3]

> Question #3

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> a.append(5)
>>> len(a)

2


\>>>> 5


6

> Question #4

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> a[-3]

-3


[4, 3]


\>>>> 2

> Question #5

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> a[-1]

[4, 3, 2, 1]


-1


2


\>>>> 4

> Question #6

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> b = a
>>> a[2] = 10
>>> b

b


[1]


\>>>> [1, 2, 10, 4]


a


[1, 2, 3, 4]

> Question #7

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> a[0]

[1, 2, 3, 4]


\>>>> 1


2


[1, 2]


[1]

> Question #8

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> b = a
>>> a[2] = 10
>>> a

b


[1]


\>>>> [1, 2, 10, 4]


a


[1, 2, 3, 4]

> Question #9

What do these lines print?

>>> a = [1, 2, 3, 4]
>>> len(a)

8


2


\>>>> 4


6




######
# 0x4
######

Question #0

What do these lines print?

>>> for i in [1, 3, 4, 2]:
>>>     print(i, end=" ")

1 3 4 2 0


0 1 2 3


1 2 3 4


\>>>>>> 1 3 4 2

Question #1

What do these lines print?

>>> for i in range(0, 3):
>>>     print(i, end=" ")

1 2 3


0 1 2 3


\>>>>>> 0 1 2

Question #2

What do these lines print?

>>> a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4], 'friends': [ { 'id': 82, 'name': "Bob" }, { 'id': 83, 'name': "Amy" } ] }
>>> a.get('friends')[-1].get("name")

Nothing


89


[ { ‘id’: 82, ‘name’: “Bob” }, { ‘id’: 83, ‘name’: “Amy” } ]


Bob


\>>>>>> Amy

Question #3

What do these lines print?

>>> a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4] }
>>> a.get('projects')[3]

[3]


\>>>>>> 4


[4]


3


[1, 2, 3, 4]

Question #4

What do these lines print?

>>> a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4] }
>>> a.get('projects')

Nothing


‘projects’


\>>>>>> [1, 2, 3, 4]


list


[1]

Question #5

What do these lines print?

>>> a = { 'id': 89, 'name': "John" }
>>> a.get('age')

\>>>>>> Nothing


‘age’


Not found


12


89

Question #6

What do these lines print?

>>> a = { 'id': 89, 'name': "John" }
>>> a.get('id')

John


id


‘id’


\>>>>>> 89


a[‘id’]

Question #7

What do these lines print?

>>> for i in ["Hello", "Holberton", "School", 98]:
>>>     print(i, end=" ")

0 1 2 3


1 2 3 4


\>>>>>> Hello Holberton School 98

Question #8

What do these lines print?

>>> for i in [1, 2, 3, 4]:
>>>     print(i, end=" ")

\>>>>>> 1 2 3 4


0 1 2 3


0 1 2 3 5


1 2 3

Question #9

What do these lines print?

>>> a = { 'id': 89, 'name': "John" }
>>> a['id']

John


id


‘id’


\>>>>>>  89


a[‘id’]

Question #10

What do these lines print?

>>> for i in range(1, 4):
>>>     print(i, end=" ")

\>>>>>> 1 2 3


0 1 2 3


1 2 3 4

Question #11

What do these lines print?

>>> a = { 'id': 89, 'name': "John" }
>>> a.get('age', 0)

89


‘age’


Nothing


\>>>>>> 0

######
# 0x5


######

######
# 0x6


######
Question #0

What do these lines print?

>>> class User:
>>>     id = 89
>>>     name = "no name"
>>>     __password = None
>>>     
>>>     def __init__(self, new_name=None):
>>>         self.is_new = True
>>>         if new_name is not None:
>>>             self.name = new_name
>>> 
>>> u = User()
>>> u.name

\>>>>no name


name


None


John

Question #1

What do these lines print?

>>> class User:
>>>     id = 89
>>>     name = "no name"
>>>     __password = None
>>>     
>>>     def __init__(self, new_name=None):
>>>         self.is_new = True
>>>         if new_name is not None:
>>>             self.name = new_name
>>> 
>>> u = User("John")
>>> u.name

no name


name


None


\>>>>John

Question #2

What do these lines print?

>>> class User:
>>>     id = 89
>>>     name = "no name"
>>>     __password = None
>>>     
>>>     def __init__(self, new_name=None):
>>>         self.is_new = True
>>>         if new_name is not None:
>>>             self.name = new_name
>>> 
>>> u = User()
>>> u.id

Nothing


\>>>>89


id


User.id

Question #3

What do these lines print?

>>> class User:
>>>     id = 89
>>>     name = "no name"
>>>     __password = None
>>>     
>>>     def __init__(self, new_name=None):
>>>         self.is_new = True
>>>         if new_name is not None:
>>>             self.name = new_name
>>> 
>>> u = User()
>>> u.is_new

\>>>>True


is_new


Nothing


False

Question #4

In this following code, what is __password?

class User:
    id = 89
    name = "no name"
    __password = None

    def __init__(self, new_name=None):
        self.is_new = True
        if new_name is not None:
            self.name = new_name

A private instance attribute


A public class attribute


A public instance attribute


\>>>>A private class attribute


A protected instance attribute


A protected class attribute

Question #5

In this following code, what is id?

class User:
    id = 89
    name = "no name"
    __password = None

    def __init__(self, new_name=None):
        self.is_new = True
        if new_name is not None:
            self.name = new_name

A protected class attribute


A public instance attribute


\>>>>A public class attribute


A private class attribute


A public instance method


A public class method

Question #6

In this following code, what is User?

class User:
    id = 89
    name = "no name"
    __password = None

    def __init__(self, new_name=None):
        self.is_new = True
        if new_name is not None:
            self.name = new_name

An instance


\>>>>A class


A string


A method


An attribute

Question #7

In this following code, what is is_new?

class User:
    id = 89
    name = "no name"
    __password = None

    def __init__(self, new_name=None):
        self.is_new = True
        if new_name is not None:
            self.name = new_name

A private instance attribute


A public class attribute


\>>>>A public instance attribute


A private class attribute


A protected instance attribute


A protected class attribute











######
# 0x7


######
Question #0

Based on this code, what should all the test cases be? (select multiple)

def uniq(list):
    """ Returns unique values of a list """
    u_list = []
    for item in list:
        if item not in u_list:
            u_list.append(item)
    return u_list

\>>>>list with more than 2 times the same element (same type)


\>>>>empty list


\>>>>not a list argument (ex: passing a dictionary to the method)


\>>>>list with one element (any type)


\>>>>list with multiple types (integer, string, etc…)


\>>>>list with twice the same element (same type)


\>>>>list with 2 different element (same type)

Question #1

Is this module correctly commented?

#!/usr/bin/python3
import sys

""" 
    My calculation module
"""
...

\>>>>No


Yes

Tips:

Docstring must be before import statements
Question #2

Is this module correctly commented?

#!/usr/bin/python3
""" 
    My calculation module
"""
import sys
...

No


\>>>>Yes

Question #3

Is this a standardized way to comment a function in Python?

##########
# Addition function
##########
def add(a, b):
    return a + b

\>>>>No


Yes

Question #4

Is this a standardized way to comment a function in Python?

"""" Addition function """
def add(a, b):
    return a + b

\>>>>No


Yes

Question #5

Is this a standardized way to comment a function in Python?

/* Addition function */
def add(a, b):
    return a + b

\>>>>No


Yes

Question #6

Is this a standardized way to comment a function in Python?

def add(a, b):
    """ Addition function """
    return a + b

No


\>>>>Yes











######
# 0x8
######
Question #0

What do these lines print?

class User:
    id = 1

User.id = 98
u = User()
u.id = 89
print(u.id)

98


None


1


\>>>>89

Question #1

What do these lines print?

class User:
    id = 1

u = User()
u.id = 89
print(u.id)

98


None


1


\>>>>89

Question #2

What do these lines print?

class User:
    id = 1

u = User()
print(u.id)

98


None


\>>>>1


89

Question #3

What do these lines print?

class User:
    id = 1

print(User.id)

98


None


\>>>>1


89

Question #4

What is __doc__?


\>>>>The string documentation of an object (based on docstring)


Prints the documentation of an object


Creates man file

Question #5

What is __repr__?


Instance method that prints an “official” string representation of an instance


\>>>>Instance method that returns an “official” string representation of an instance


Instance method that returns the dictionary representation of an instance

Question #6

What is __str__?


\>>>>Instance method that returns an “informal” and nicely printable string representation of an instance


Instance method that returns the dictionary representation of an instance


Instance method that prints an “informal” and nicely printable string representation of an instance

Question #7

What do these lines print?

class User:
    id = 1

User.id = 98
u = User()
u.id = 89
print(User.id)

\>>>>98


None


1


89

Question #8

What do these lines print?

class User:
    id = 1

u = User()
u.id = 89
User.id = 98
print(u.id)

98


None


1


\>>>>89

Question #9

What do these lines print?

class User:
    id = 1

u = User()
User.id = 98
print(u.id)

\>>>>98


None


1


89

Question #10

What is __init__?


The instance method called when a class is called for the first time


A class attribute


A class method


\>>>> The instance method called when a new object is created

Question #11

What do these lines print?

class User:
    id = 1

u = User()
u.id = 89
User.id = 98
print(User.id)

\>>>> 98


None


1


89

Question #12

What do these lines print?

class User:
    id = 1

User.id = 98
u = User()
print(u.id)

\>>>> 98


None


1


89

Question #13

What is __del__?


Instance method that removes the last character of an instance


Instance method that prints the memory address of an instance


\>>>> Instance method called when an instance is deleted



######
# 0x9


######

######
# 0x10


######




*THE END*
